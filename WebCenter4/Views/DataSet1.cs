//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebCenter.Views {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private PageTableDataTable tablePageTable;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PageTable"] != null)) {
                    this.Tables.Add(new PageTableDataTable(ds.Tables["PageTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PageTableDataTable PageTable {
            get {
                return this.tablePageTable;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PageTable"] != null)) {
                this.Tables.Add(new PageTableDataTable(ds.Tables["PageTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePageTable = ((PageTableDataTable)(this.Tables["PageTable"]));
            if ((this.tablePageTable != null)) {
                this.tablePageTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("da-DK");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePageTable = new PageTableDataTable();
            this.Tables.Add(this.tablePageTable);
        }
        
        private bool ShouldSerializePageTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PageTableRowChangeEventHandler(object sender, PageTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PageTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCopySeparationSet;
            
            private DataColumn columnSeparationSet;
            
            private DataColumn columnSeparation;
            
            private DataColumn columnCopyFlatSeparationSet;
            
            private DataColumn columnFlatSeparationSet;
            
            private DataColumn columnFlatSeparation;
            
            private DataColumn columnStatus;
            
            private DataColumn columnExternalStatus;
            
            private DataColumn columnPublicationID;
            
            private DataColumn columnSectionID;
            
            private DataColumn columnEditionID;
            
            private DataColumn columnIssueID;
            
            private DataColumn columnPubDate;
            
            private DataColumn columnPageName;
            
            private DataColumn columnColorID;
            
            private DataColumn columnTemplateID;
            
            private DataColumn columnProofID;
            
            private DataColumn columnDeviceID;
            
            private DataColumn columnVersion;
            
            private DataColumn columnLayer;
            
            private DataColumn columnCopyNumber;
            
            private DataColumn columnPagination;
            
            private DataColumn columnApproved;
            
            private DataColumn columnHold;
            
            private DataColumn columnActive;
            
            private DataColumn columnPriority;
            
            private DataColumn columnPagePosition;
            
            private DataColumn columnPageType;
            
            private DataColumn columnPagesOnPlate;
            
            private DataColumn columnSheetNumber;
            
            private DataColumn columnSheetSide;
            
            private DataColumn columnPressID;
            
            private DataColumn columnPressSectionNumber;
            
            private DataColumn columnSortingPosition;
            
            private DataColumn columnPressTower;
            
            private DataColumn columnPressCylinder;
            
            private DataColumn columnPressZone;
            
            private DataColumn columnPressHighLow;
            
            private DataColumn columnProductionID;
            
            private DataColumn columnPressRunID;
            
            private DataColumn columnProofStatus;
            
            private DataColumn columnInkStatus;
            
            internal PageTableDataTable() : 
                    base("PageTable") {
                this.InitClass();
            }
            
            internal PageTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CopySeparationSetColumn {
                get {
                    return this.columnCopySeparationSet;
                }
            }
            
            internal DataColumn SeparationSetColumn {
                get {
                    return this.columnSeparationSet;
                }
            }
            
            internal DataColumn SeparationColumn {
                get {
                    return this.columnSeparation;
                }
            }
            
            internal DataColumn CopyFlatSeparationSetColumn {
                get {
                    return this.columnCopyFlatSeparationSet;
                }
            }
            
            internal DataColumn FlatSeparationSetColumn {
                get {
                    return this.columnFlatSeparationSet;
                }
            }
            
            internal DataColumn FlatSeparationColumn {
                get {
                    return this.columnFlatSeparation;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn ExternalStatusColumn {
                get {
                    return this.columnExternalStatus;
                }
            }
            
            internal DataColumn PublicationIDColumn {
                get {
                    return this.columnPublicationID;
                }
            }
            
            internal DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            internal DataColumn EditionIDColumn {
                get {
                    return this.columnEditionID;
                }
            }
            
            internal DataColumn IssueIDColumn {
                get {
                    return this.columnIssueID;
                }
            }
            
            internal DataColumn PubDateColumn {
                get {
                    return this.columnPubDate;
                }
            }
            
            internal DataColumn PageNameColumn {
                get {
                    return this.columnPageName;
                }
            }
            
            internal DataColumn ColorIDColumn {
                get {
                    return this.columnColorID;
                }
            }
            
            internal DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            internal DataColumn ProofIDColumn {
                get {
                    return this.columnProofID;
                }
            }
            
            internal DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            internal DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            internal DataColumn LayerColumn {
                get {
                    return this.columnLayer;
                }
            }
            
            internal DataColumn CopyNumberColumn {
                get {
                    return this.columnCopyNumber;
                }
            }
            
            internal DataColumn PaginationColumn {
                get {
                    return this.columnPagination;
                }
            }
            
            internal DataColumn ApprovedColumn {
                get {
                    return this.columnApproved;
                }
            }
            
            internal DataColumn HoldColumn {
                get {
                    return this.columnHold;
                }
            }
            
            internal DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            internal DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            internal DataColumn PagePositionColumn {
                get {
                    return this.columnPagePosition;
                }
            }
            
            internal DataColumn PageTypeColumn {
                get {
                    return this.columnPageType;
                }
            }
            
            internal DataColumn PagesOnPlateColumn {
                get {
                    return this.columnPagesOnPlate;
                }
            }
            
            internal DataColumn SheetNumberColumn {
                get {
                    return this.columnSheetNumber;
                }
            }
            
            internal DataColumn SheetSideColumn {
                get {
                    return this.columnSheetSide;
                }
            }
            
            internal DataColumn PressIDColumn {
                get {
                    return this.columnPressID;
                }
            }
            
            internal DataColumn PressSectionNumberColumn {
                get {
                    return this.columnPressSectionNumber;
                }
            }
            
            internal DataColumn SortingPositionColumn {
                get {
                    return this.columnSortingPosition;
                }
            }
            
            internal DataColumn PressTowerColumn {
                get {
                    return this.columnPressTower;
                }
            }
            
            internal DataColumn PressCylinderColumn {
                get {
                    return this.columnPressCylinder;
                }
            }
            
            internal DataColumn PressZoneColumn {
                get {
                    return this.columnPressZone;
                }
            }
            
            internal DataColumn PressHighLowColumn {
                get {
                    return this.columnPressHighLow;
                }
            }
            
            internal DataColumn ProductionIDColumn {
                get {
                    return this.columnProductionID;
                }
            }
            
            internal DataColumn PressRunIDColumn {
                get {
                    return this.columnPressRunID;
                }
            }
            
            internal DataColumn ProofStatusColumn {
                get {
                    return this.columnProofStatus;
                }
            }
            
            internal DataColumn InkStatusColumn {
                get {
                    return this.columnInkStatus;
                }
            }
            
            public PageTableRow this[int index] {
                get {
                    return ((PageTableRow)(this.Rows[index]));
                }
            }
            
            public event PageTableRowChangeEventHandler PageTableRowChanged;
            
            public event PageTableRowChangeEventHandler PageTableRowChanging;
            
            public event PageTableRowChangeEventHandler PageTableRowDeleted;
            
            public event PageTableRowChangeEventHandler PageTableRowDeleting;
            
            public void AddPageTableRow(PageTableRow row) {
                this.Rows.Add(row);
            }
            
            public PageTableRow AddPageTableRow(
                        int CopySeparationSet, 
                        int SeparationSet, 
                        int Separation, 
                        int CopyFlatSeparationSet, 
                        int FlatSeparationSet, 
                        int FlatSeparation, 
                        int Status, 
                        int ExternalStatus, 
                        int PublicationID, 
                        int SectionID, 
                        int EditionID, 
                        int IssueID, 
                        System.DateTime PubDate, 
                        string PageName, 
                        int ColorID, 
                        int TemplateID, 
                        int ProofID, 
                        int DeviceID, 
                        int Version, 
                        int Layer, 
                        int CopyNumber, 
                        int Pagination, 
                        int Approved, 
                        int Hold, 
                        int Active, 
                        int Priority, 
                        int PagePosition, 
                        int PageType, 
                        int PagesOnPlate, 
                        int SheetNumber, 
                        int SheetSide, 
                        int PressID, 
                        int PressSectionNumber, 
                        int SortingPosition, 
                        string PressTower, 
                        string PressCylinder, 
                        string PressZone, 
                        string PressHighLow, 
                        int ProductionID, 
                        int PressRunID, 
                        int ProofStatus, 
                        int InkStatus) {
                PageTableRow rowPageTableRow = ((PageTableRow)(this.NewRow()));
                rowPageTableRow.ItemArray = new object[] {
                        CopySeparationSet,
                        SeparationSet,
                        Separation,
                        CopyFlatSeparationSet,
                        FlatSeparationSet,
                        FlatSeparation,
                        Status,
                        ExternalStatus,
                        PublicationID,
                        SectionID,
                        EditionID,
                        IssueID,
                        PubDate,
                        PageName,
                        ColorID,
                        TemplateID,
                        ProofID,
                        DeviceID,
                        Version,
                        Layer,
                        CopyNumber,
                        Pagination,
                        Approved,
                        Hold,
                        Active,
                        Priority,
                        PagePosition,
                        PageType,
                        PagesOnPlate,
                        SheetNumber,
                        SheetSide,
                        PressID,
                        PressSectionNumber,
                        SortingPosition,
                        PressTower,
                        PressCylinder,
                        PressZone,
                        PressHighLow,
                        ProductionID,
                        PressRunID,
                        ProofStatus,
                        InkStatus};
                this.Rows.Add(rowPageTableRow);
                return rowPageTableRow;
            }
            
            public PageTableRow FindBySeparation(int Separation) {
                return ((PageTableRow)(this.Rows.Find(new object[] {
                            Separation})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PageTableDataTable cln = ((PageTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PageTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCopySeparationSet = this.Columns["CopySeparationSet"];
                this.columnSeparationSet = this.Columns["SeparationSet"];
                this.columnSeparation = this.Columns["Separation"];
                this.columnCopyFlatSeparationSet = this.Columns["CopyFlatSeparationSet"];
                this.columnFlatSeparationSet = this.Columns["FlatSeparationSet"];
                this.columnFlatSeparation = this.Columns["FlatSeparation"];
                this.columnStatus = this.Columns["Status"];
                this.columnExternalStatus = this.Columns["ExternalStatus"];
                this.columnPublicationID = this.Columns["PublicationID"];
                this.columnSectionID = this.Columns["SectionID"];
                this.columnEditionID = this.Columns["EditionID"];
                this.columnIssueID = this.Columns["IssueID"];
                this.columnPubDate = this.Columns["PubDate"];
                this.columnPageName = this.Columns["PageName"];
                this.columnColorID = this.Columns["ColorID"];
                this.columnTemplateID = this.Columns["TemplateID"];
                this.columnProofID = this.Columns["ProofID"];
                this.columnDeviceID = this.Columns["DeviceID"];
                this.columnVersion = this.Columns["Version"];
                this.columnLayer = this.Columns["Layer"];
                this.columnCopyNumber = this.Columns["CopyNumber"];
                this.columnPagination = this.Columns["Pagination"];
                this.columnApproved = this.Columns["Approved"];
                this.columnHold = this.Columns["Hold"];
                this.columnActive = this.Columns["Active"];
                this.columnPriority = this.Columns["Priority"];
                this.columnPagePosition = this.Columns["PagePosition"];
                this.columnPageType = this.Columns["PageType"];
                this.columnPagesOnPlate = this.Columns["PagesOnPlate"];
                this.columnSheetNumber = this.Columns["SheetNumber"];
                this.columnSheetSide = this.Columns["SheetSide"];
                this.columnPressID = this.Columns["PressID"];
                this.columnPressSectionNumber = this.Columns["PressSectionNumber"];
                this.columnSortingPosition = this.Columns["SortingPosition"];
                this.columnPressTower = this.Columns["PressTower"];
                this.columnPressCylinder = this.Columns["PressCylinder"];
                this.columnPressZone = this.Columns["PressZone"];
                this.columnPressHighLow = this.Columns["PressHighLow"];
                this.columnProductionID = this.Columns["ProductionID"];
                this.columnPressRunID = this.Columns["PressRunID"];
                this.columnProofStatus = this.Columns["ProofStatus"];
                this.columnInkStatus = this.Columns["InkStatus"];
            }
            
            private void InitClass() {
                this.columnCopySeparationSet = new DataColumn("CopySeparationSet", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCopySeparationSet);
                this.columnSeparationSet = new DataColumn("SeparationSet", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSeparationSet);
                this.columnSeparation = new DataColumn("Separation", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSeparation);
                this.columnCopyFlatSeparationSet = new DataColumn("CopyFlatSeparationSet", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCopyFlatSeparationSet);
                this.columnFlatSeparationSet = new DataColumn("FlatSeparationSet", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFlatSeparationSet);
                this.columnFlatSeparation = new DataColumn("FlatSeparation", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFlatSeparation);
                this.columnStatus = new DataColumn("Status", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnExternalStatus = new DataColumn("ExternalStatus", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalStatus);
                this.columnPublicationID = new DataColumn("PublicationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPublicationID);
                this.columnSectionID = new DataColumn("SectionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionID);
                this.columnEditionID = new DataColumn("EditionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEditionID);
                this.columnIssueID = new DataColumn("IssueID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssueID);
                this.columnPubDate = new DataColumn("PubDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPubDate);
                this.columnPageName = new DataColumn("PageName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPageName);
                this.columnColorID = new DataColumn("ColorID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColorID);
                this.columnTemplateID = new DataColumn("TemplateID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTemplateID);
                this.columnProofID = new DataColumn("ProofID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProofID);
                this.columnDeviceID = new DataColumn("DeviceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeviceID);
                this.columnVersion = new DataColumn("Version", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVersion);
                this.columnLayer = new DataColumn("Layer", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLayer);
                this.columnCopyNumber = new DataColumn("CopyNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCopyNumber);
                this.columnPagination = new DataColumn("Pagination", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPagination);
                this.columnApproved = new DataColumn("Approved", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApproved);
                this.columnHold = new DataColumn("Hold", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHold);
                this.columnActive = new DataColumn("Active", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActive);
                this.columnPriority = new DataColumn("Priority", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriority);
                this.columnPagePosition = new DataColumn("PagePosition", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPagePosition);
                this.columnPageType = new DataColumn("PageType", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPageType);
                this.columnPagesOnPlate = new DataColumn("PagesOnPlate", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPagesOnPlate);
                this.columnSheetNumber = new DataColumn("SheetNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSheetNumber);
                this.columnSheetSide = new DataColumn("SheetSide", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSheetSide);
                this.columnPressID = new DataColumn("PressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPressID);
                this.columnPressSectionNumber = new DataColumn("PressSectionNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPressSectionNumber);
                this.columnSortingPosition = new DataColumn("SortingPosition", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortingPosition);
                this.columnPressTower = new DataColumn("PressTower", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPressTower);
                this.columnPressCylinder = new DataColumn("PressCylinder", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPressCylinder);
                this.columnPressZone = new DataColumn("PressZone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPressZone);
                this.columnPressHighLow = new DataColumn("PressHighLow", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPressHighLow);
                this.columnProductionID = new DataColumn("ProductionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductionID);
                this.columnPressRunID = new DataColumn("PressRunID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPressRunID);
                this.columnProofStatus = new DataColumn("ProofStatus", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProofStatus);
                this.columnInkStatus = new DataColumn("InkStatus", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInkStatus);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSeparation}, true));
                this.columnCopySeparationSet.AllowDBNull = false;
                this.columnSeparationSet.AllowDBNull = false;
                this.columnSeparation.AllowDBNull = false;
                this.columnSeparation.Unique = true;
                this.columnCopyFlatSeparationSet.AllowDBNull = false;
                this.columnFlatSeparationSet.AllowDBNull = false;
                this.columnFlatSeparation.AllowDBNull = false;
                this.columnPublicationID.AllowDBNull = false;
                this.columnSectionID.AllowDBNull = false;
                this.columnEditionID.AllowDBNull = false;
                this.columnIssueID.AllowDBNull = false;
                this.columnPubDate.AllowDBNull = false;
                this.columnPageName.AllowDBNull = false;
                this.columnColorID.AllowDBNull = false;
                this.columnProofID.AllowDBNull = false;
                this.columnLayer.AllowDBNull = false;
                this.columnCopyNumber.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
            }
            
            public PageTableRow NewPageTableRow() {
                return ((PageTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PageTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PageTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PageTableRowChanged != null)) {
                    this.PageTableRowChanged(this, new PageTableRowChangeEvent(((PageTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PageTableRowChanging != null)) {
                    this.PageTableRowChanging(this, new PageTableRowChangeEvent(((PageTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PageTableRowDeleted != null)) {
                    this.PageTableRowDeleted(this, new PageTableRowChangeEvent(((PageTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PageTableRowDeleting != null)) {
                    this.PageTableRowDeleting(this, new PageTableRowChangeEvent(((PageTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePageTableRow(PageTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PageTableRow : DataRow {
            
            private PageTableDataTable tablePageTable;
            
            internal PageTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePageTable = ((PageTableDataTable)(this.Table));
            }
            
            public int CopySeparationSet {
                get {
                    return ((int)(this[this.tablePageTable.CopySeparationSetColumn]));
                }
                set {
                    this[this.tablePageTable.CopySeparationSetColumn] = value;
                }
            }
            
            public int SeparationSet {
                get {
                    return ((int)(this[this.tablePageTable.SeparationSetColumn]));
                }
                set {
                    this[this.tablePageTable.SeparationSetColumn] = value;
                }
            }
            
            public int Separation {
                get {
                    return ((int)(this[this.tablePageTable.SeparationColumn]));
                }
                set {
                    this[this.tablePageTable.SeparationColumn] = value;
                }
            }
            
            public int CopyFlatSeparationSet {
                get {
                    return ((int)(this[this.tablePageTable.CopyFlatSeparationSetColumn]));
                }
                set {
                    this[this.tablePageTable.CopyFlatSeparationSetColumn] = value;
                }
            }
            
            public int FlatSeparationSet {
                get {
                    return ((int)(this[this.tablePageTable.FlatSeparationSetColumn]));
                }
                set {
                    this[this.tablePageTable.FlatSeparationSetColumn] = value;
                }
            }
            
            public int FlatSeparation {
                get {
                    return ((int)(this[this.tablePageTable.FlatSeparationColumn]));
                }
                set {
                    this[this.tablePageTable.FlatSeparationColumn] = value;
                }
            }
            
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.StatusColumn] = value;
                }
            }
            
            public int ExternalStatus {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.ExternalStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.ExternalStatusColumn] = value;
                }
            }
            
            public int PublicationID {
                get {
                    return ((int)(this[this.tablePageTable.PublicationIDColumn]));
                }
                set {
                    this[this.tablePageTable.PublicationIDColumn] = value;
                }
            }
            
            public int SectionID {
                get {
                    return ((int)(this[this.tablePageTable.SectionIDColumn]));
                }
                set {
                    this[this.tablePageTable.SectionIDColumn] = value;
                }
            }
            
            public int EditionID {
                get {
                    return ((int)(this[this.tablePageTable.EditionIDColumn]));
                }
                set {
                    this[this.tablePageTable.EditionIDColumn] = value;
                }
            }
            
            public int IssueID {
                get {
                    return ((int)(this[this.tablePageTable.IssueIDColumn]));
                }
                set {
                    this[this.tablePageTable.IssueIDColumn] = value;
                }
            }
            
            public System.DateTime PubDate {
                get {
                    return ((System.DateTime)(this[this.tablePageTable.PubDateColumn]));
                }
                set {
                    this[this.tablePageTable.PubDateColumn] = value;
                }
            }
            
            public string PageName {
                get {
                    return ((string)(this[this.tablePageTable.PageNameColumn]));
                }
                set {
                    this[this.tablePageTable.PageNameColumn] = value;
                }
            }
            
            public int ColorID {
                get {
                    return ((int)(this[this.tablePageTable.ColorIDColumn]));
                }
                set {
                    this[this.tablePageTable.ColorIDColumn] = value;
                }
            }
            
            public int TemplateID {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.TemplateIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.TemplateIDColumn] = value;
                }
            }
            
            public int ProofID {
                get {
                    return ((int)(this[this.tablePageTable.ProofIDColumn]));
                }
                set {
                    this[this.tablePageTable.ProofIDColumn] = value;
                }
            }
            
            public int DeviceID {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.DeviceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.DeviceIDColumn] = value;
                }
            }
            
            public int Version {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.VersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.VersionColumn] = value;
                }
            }
            
            public int Layer {
                get {
                    return ((int)(this[this.tablePageTable.LayerColumn]));
                }
                set {
                    this[this.tablePageTable.LayerColumn] = value;
                }
            }
            
            public int CopyNumber {
                get {
                    return ((int)(this[this.tablePageTable.CopyNumberColumn]));
                }
                set {
                    this[this.tablePageTable.CopyNumberColumn] = value;
                }
            }
            
            public int Pagination {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PaginationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PaginationColumn] = value;
                }
            }
            
            public int Approved {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.ApprovedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.ApprovedColumn] = value;
                }
            }
            
            public int Hold {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.HoldColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.HoldColumn] = value;
                }
            }
            
            public int Active {
                get {
                    return ((int)(this[this.tablePageTable.ActiveColumn]));
                }
                set {
                    this[this.tablePageTable.ActiveColumn] = value;
                }
            }
            
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PriorityColumn] = value;
                }
            }
            
            public int PagePosition {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PagePositionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PagePositionColumn] = value;
                }
            }
            
            public int PageType {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PageTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PageTypeColumn] = value;
                }
            }
            
            public int PagesOnPlate {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PagesOnPlateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PagesOnPlateColumn] = value;
                }
            }
            
            public int SheetNumber {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.SheetNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.SheetNumberColumn] = value;
                }
            }
            
            public int SheetSide {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.SheetSideColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.SheetSideColumn] = value;
                }
            }
            
            public int PressID {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PressIDColumn] = value;
                }
            }
            
            public int PressSectionNumber {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PressSectionNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PressSectionNumberColumn] = value;
                }
            }
            
            public int SortingPosition {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.SortingPositionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.SortingPositionColumn] = value;
                }
            }
            
            public string PressTower {
                get {
                    try {
                        return ((string)(this[this.tablePageTable.PressTowerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PressTowerColumn] = value;
                }
            }
            
            public string PressCylinder {
                get {
                    try {
                        return ((string)(this[this.tablePageTable.PressCylinderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PressCylinderColumn] = value;
                }
            }
            
            public string PressZone {
                get {
                    try {
                        return ((string)(this[this.tablePageTable.PressZoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PressZoneColumn] = value;
                }
            }
            
            public string PressHighLow {
                get {
                    try {
                        return ((string)(this[this.tablePageTable.PressHighLowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PressHighLowColumn] = value;
                }
            }
            
            public int ProductionID {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.ProductionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.ProductionIDColumn] = value;
                }
            }
            
            public int PressRunID {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.PressRunIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.PressRunIDColumn] = value;
                }
            }
            
            public int ProofStatus {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.ProofStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.ProofStatusColumn] = value;
                }
            }
            
            public int InkStatus {
                get {
                    try {
                        return ((int)(this[this.tablePageTable.InkStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePageTable.InkStatusColumn] = value;
                }
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tablePageTable.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tablePageTable.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalStatusNull() {
                return this.IsNull(this.tablePageTable.ExternalStatusColumn);
            }
            
            public void SetExternalStatusNull() {
                this[this.tablePageTable.ExternalStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsTemplateIDNull() {
                return this.IsNull(this.tablePageTable.TemplateIDColumn);
            }
            
            public void SetTemplateIDNull() {
                this[this.tablePageTable.TemplateIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tablePageTable.DeviceIDColumn);
            }
            
            public void SetDeviceIDNull() {
                this[this.tablePageTable.DeviceIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsVersionNull() {
                return this.IsNull(this.tablePageTable.VersionColumn);
            }
            
            public void SetVersionNull() {
                this[this.tablePageTable.VersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaginationNull() {
                return this.IsNull(this.tablePageTable.PaginationColumn);
            }
            
            public void SetPaginationNull() {
                this[this.tablePageTable.PaginationColumn] = System.Convert.DBNull;
            }
            
            public bool IsApprovedNull() {
                return this.IsNull(this.tablePageTable.ApprovedColumn);
            }
            
            public void SetApprovedNull() {
                this[this.tablePageTable.ApprovedColumn] = System.Convert.DBNull;
            }
            
            public bool IsHoldNull() {
                return this.IsNull(this.tablePageTable.HoldColumn);
            }
            
            public void SetHoldNull() {
                this[this.tablePageTable.HoldColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriorityNull() {
                return this.IsNull(this.tablePageTable.PriorityColumn);
            }
            
            public void SetPriorityNull() {
                this[this.tablePageTable.PriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPagePositionNull() {
                return this.IsNull(this.tablePageTable.PagePositionColumn);
            }
            
            public void SetPagePositionNull() {
                this[this.tablePageTable.PagePositionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPageTypeNull() {
                return this.IsNull(this.tablePageTable.PageTypeColumn);
            }
            
            public void SetPageTypeNull() {
                this[this.tablePageTable.PageTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPagesOnPlateNull() {
                return this.IsNull(this.tablePageTable.PagesOnPlateColumn);
            }
            
            public void SetPagesOnPlateNull() {
                this[this.tablePageTable.PagesOnPlateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSheetNumberNull() {
                return this.IsNull(this.tablePageTable.SheetNumberColumn);
            }
            
            public void SetSheetNumberNull() {
                this[this.tablePageTable.SheetNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsSheetSideNull() {
                return this.IsNull(this.tablePageTable.SheetSideColumn);
            }
            
            public void SetSheetSideNull() {
                this[this.tablePageTable.SheetSideColumn] = System.Convert.DBNull;
            }
            
            public bool IsPressIDNull() {
                return this.IsNull(this.tablePageTable.PressIDColumn);
            }
            
            public void SetPressIDNull() {
                this[this.tablePageTable.PressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPressSectionNumberNull() {
                return this.IsNull(this.tablePageTable.PressSectionNumberColumn);
            }
            
            public void SetPressSectionNumberNull() {
                this[this.tablePageTable.PressSectionNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortingPositionNull() {
                return this.IsNull(this.tablePageTable.SortingPositionColumn);
            }
            
            public void SetSortingPositionNull() {
                this[this.tablePageTable.SortingPositionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPressTowerNull() {
                return this.IsNull(this.tablePageTable.PressTowerColumn);
            }
            
            public void SetPressTowerNull() {
                this[this.tablePageTable.PressTowerColumn] = System.Convert.DBNull;
            }
            
            public bool IsPressCylinderNull() {
                return this.IsNull(this.tablePageTable.PressCylinderColumn);
            }
            
            public void SetPressCylinderNull() {
                this[this.tablePageTable.PressCylinderColumn] = System.Convert.DBNull;
            }
            
            public bool IsPressZoneNull() {
                return this.IsNull(this.tablePageTable.PressZoneColumn);
            }
            
            public void SetPressZoneNull() {
                this[this.tablePageTable.PressZoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsPressHighLowNull() {
                return this.IsNull(this.tablePageTable.PressHighLowColumn);
            }
            
            public void SetPressHighLowNull() {
                this[this.tablePageTable.PressHighLowColumn] = System.Convert.DBNull;
            }
            
            public bool IsProductionIDNull() {
                return this.IsNull(this.tablePageTable.ProductionIDColumn);
            }
            
            public void SetProductionIDNull() {
                this[this.tablePageTable.ProductionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPressRunIDNull() {
                return this.IsNull(this.tablePageTable.PressRunIDColumn);
            }
            
            public void SetPressRunIDNull() {
                this[this.tablePageTable.PressRunIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProofStatusNull() {
                return this.IsNull(this.tablePageTable.ProofStatusColumn);
            }
            
            public void SetProofStatusNull() {
                this[this.tablePageTable.ProofStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsInkStatusNull() {
                return this.IsNull(this.tablePageTable.InkStatusColumn);
            }
            
            public void SetInkStatusNull() {
                this[this.tablePageTable.InkStatusColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PageTableRowChangeEvent : EventArgs {
            
            private PageTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public PageTableRowChangeEvent(PageTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PageTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
